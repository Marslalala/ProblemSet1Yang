---
title: "Problem_Set_1_Yang"
author: "Yang Han"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
    error: true
editor: visual
---

# Question 1

## Part a

Import the data as data.frame

```{r}
wine_data <- read.csv('wine.data', header = FALSE)
```

Column names setting

```{r}
Col_name <- c('Class', 'Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash',
              'Magnesium', 'Total phenols', 'Flavanoids', 'Nonflavanoid phenols',
              'Proanthocyanins', 'Color intensity', 'Hue', 'OD280/OD315 of diluted wines',
              'Proline')
colnames(wine_data) <- Col_name
names(wine_data)
```

## Part b

Number of wines checked in each of 3 classes

```{r}
length(which(wine_data$Class == 1))
length(which(wine_data$Class == 2))
length(which(wine_data$Class == 3))
```

Class distribution in "wine.names": Class 1: 59; Class 2: 71; Class 3: 48

## Part c

### 1.

```{r}
max_alc <- max(wine_data$Alcohol)
```

Check the uniqueness of the wine with the highest alcohol content

```{r}
length(which(wine_data$Alcohol == max_alc))
wine_data[wine_data$Alcohol == max_alc, ][, 1]
```

The wine with the highest alcohol content belongs to class 1

### 2.

```{r}
min_alc <- min(wine_data$Alcohol)
```

Check the uniqueness of the wine with the lowest alcohol content

```{r}
length(which(wine_data$Alcohol == min_alc))
wine_data[wine_data$Alcohol == min_alc, ][, 1]
```

The wine with the lowest alcohol content belongs to class 2

### 3.

```{r}
Beer_mag <- 114
length(which(wine_data$Magnesium > Beer_mag))
```

There are 26 wines with levels of magnesium higher than that

### 4.

Separate all 3 classes

```{r}
class_1 <- subset(wine_data, wine_data$Class == 1)
class_2 <- subset(wine_data, wine_data$Class == 2)
class_3 <- subset(wine_data, wine_data$Class == 3)
```

Then get the values

```{r}
length(which(class_1$Magnesium > Beer_mag))
length(which(class_2$Magnesium > Beer_mag))
length(which(class_3$Magnesium > Beer_mag))
```

There are 15 wines in class 1 with levels of magnesium higher than German beers, 6 for class 2 and 5 for class 3

## Part d

Calculate the overall average

```{r}
ov_avg <- c(mean(wine_data$Alcohol), mean(wine_data$`Malic acid`), 
            mean(wine_data$Ash), mean(wine_data$`Alcalinity of ash`),
            mean(wine_data$Magnesium), mean(wine_data$`Total phenols`),
            mean(wine_data$Flavanoids), mean(wine_data$`Nonflavanoid phenols`),
            mean(wine_data$Proanthocyanins), mean(wine_data$`Color intensity`),
            mean(wine_data$Hue), mean(wine_data$`OD280/OD315 of diluted wines`),
            mean(wine_data$Proline))
```

Calculate the average for each class

```{r}
c1_avg <- c(mean(class_1$Alcohol), mean(class_1$`Malic acid`), 
            mean(class_1$Ash), mean(class_1$`Alcalinity of ash`),
            mean(class_1$Magnesium), mean(class_1$`Total phenols`),
            mean(class_1$Flavanoids), mean(class_1$`Nonflavanoid phenols`),
            mean(class_1$Proanthocyanins), mean(class_1$`Color intensity`),
            mean(class_1$Hue), mean(class_1$`OD280/OD315 of diluted wines`),
            mean(class_1$Proline))

c2_avg <- c(mean(class_2$Alcohol), mean(class_2$`Malic acid`), 
            mean(class_2$Ash), mean(class_2$`Alcalinity of ash`),
            mean(class_2$Magnesium), mean(class_2$`Total phenols`),
            mean(class_2$Flavanoids), mean(class_2$`Nonflavanoid phenols`),
            mean(class_2$Proanthocyanins), mean(class_2$`Color intensity`),
            mean(class_2$Hue), mean(class_2$`OD280/OD315 of diluted wines`),
            mean(class_2$Proline))

c3_avg <- c(mean(class_3$Alcohol), mean(class_3$`Malic acid`), 
            mean(class_3$Ash), mean(class_3$`Alcalinity of ash`),
            mean(class_3$Magnesium), mean(class_3$`Total phenols`),
            mean(class_3$Flavanoids), mean(class_3$`Nonflavanoid phenols`),
            mean(class_3$Proanthocyanins), mean(class_3$`Color intensity`),
            mean(class_3$Hue), mean(class_3$`OD280/OD315 of diluted wines`),
            mean(class_3$Proline))
```

Then create a table

```{r}
avg_tab <- t(data.frame(ov_avg, c1_avg, c2_avg, c3_avg))
```

Set the rows and columns names to make the table clear and then view the table

```{r}
#| code-fold: show
row.names(avg_tab) <- c('Overall Average', 'Average of Class 1', 
                        'Average of Class 2', 'Average of Class 3')
colnames(avg_tab) <- Col_name[-1]
rmarkdown::paged_table(as.data.frame(avg_tab))  # Method to show tables in quarto
```

## Part e

Carry out a t-test between classes 1 & 2

```{r}
t.test(class_1$Ash, class_2$Ash)
```

The p-value is 2.124e-05, which means the result is statistically significant. Therefore, the null hypothesis, the level of Ash differs between two classes, should be rejected

Carry out a t-test between classes 1 & 3

```{r}
t.test(class_1$Ash, class_3$Ash)
```

The p-value is 0.643, which means the result is statistically insignificant. Therefore, the null hypothesis, the level of Ash differs between two classes, is true

Carry out a t-test between class 2 & 3

```{r}
t.test(class_2$Ash, class_3$Ash)
```

The p-value is 5.627e-05, which means the result is statistically significant. Therefore, the null hypothesis, the level of Ash differs between two class, should be rejected.

# Question 2

## Part a

Establish the function

```{r}
#| code-fold: show
isPerfectPower <- function(n, p){
  #input: n - an integer, the number to check
  #input: p - an integer, the specified power
  
  # Define the root 
  if (p < 2){
    return('p must be an integer greater than 1')
  }
  if (n < 0 && p %% 2 == 0) {
    return(list(isPerfect = FALSE, root = paste(n, 'is not a perfect power of', p)))
  } else if (n < 0) {
    r <- -((-n)^(1 / p))
  } else if (n == 0){
    return(list(isPerfect = TRUE, root = 0))
  } else {
    r <- n^(1 / p)
  }
  tol <- 1e-10    # Set a tolerance to deal with floating power double numeric precision
  
  if(n %% 1 != 0 | p %% 1 != 0){  # Check if n and p are integers
    return(list(isPerfect = FALSE, wrongArgument = 'Please enter integers for arguments'))
  }
  
  if (-tol < n %% r && n %% r < tol){  # Set the checking conditions and check
    return(list(isPerfect = TRUE, root = r))
  } else {
    return(list(isPerfect = FALSE, root = paste(n, 'is not a perfect power of', p)))
  }
}
```

## Part b

Establish the function

```{r}
#| code-fold: show
findRootPower <- function(n){
  #input: n - an integer, the number to check
  
  if(n == 0){
    return(paste(n, '=', 0, '^', 2))
  }
  
  high_p <- 70
  r_vec <- c()
  p_vec <- c()
  for (i in 2:high_p){    # Start from 2 since when power = 1, n itself is a perfect power
    if(isPerfectPower(n, i)$isPerfect){
      r_vec <- append(r_vec, isPerfectPower(n, i)$root)
      p_vec <- append(p_vec, i)
      
    }
  }
  
  if(is.null(p_vec)){
    return(paste(n, 'is not a perfect power'))
    
  } else {
    r <- max(r_vec)
    p <- min(p_vec)
    return(paste(n, '=', r, '^', p))
  }
}
```

Carry out the test cases:

```{r}
#| code-fold: show
findRootPower(27)               # Perfect power; root = 3, power = 3
findRootPower(13060694016)
findRootPower(7776)
findRootPower(170859375)
findRootPower(58247422)
findRootPower(94143178827)      # Perfect power; root = 3, power = 23
```

# Question 3

## Part a

**The output by ChatGPT:**

Here are two R functions, one for identifying the name of a 5-card stud poker hand, and the other for simulating a round of poker with a specified number of players:

```{r}
#| code-fold: show
#  Function to identify the name of a 5-card stud poker hand
identify_poker_hand <- function(suits, ranks) {
  # Check for a flush
  is_flush <- length(unique(suits)) == 1
  
  # Check for a straight
  is_straight <- length(unique(ranks)) == 5 && (max(ranks) - min(ranks)) == 4
  
  # Check for pairs, three of a kind, and four of a kind
  rank_counts <- table(ranks)
  has_pair <- any(rank_counts == 2)
  has_three_of_a_kind <- any(rank_counts == 3)
  has_four_of_a_kind <- any(rank_counts == 4)
  
  # Determine the hand name
  if (is_flush && is_straight) {
    return("Straight Flush")
  } else if (has_four_of_a_kind) {
    return("Four of a Kind")
  } else if (has_three_of_a_kind && has_pair) {
    return("Full House")
  } else if (is_flush) {
    return("Flush")
  } else if (is_straight) {
    return("Straight")
  } else if (has_three_of_a_kind) {
    return("Three of a Kind")
  } else if (sum(rank_counts == 2) == 2) {
    return("Two Pair")
  } else if (has_pair) {
    return("One Pair")
  } else {
    return("High Card")
  }
}
```

```{r}
#| code-fold: show
#| #  Function to simulate dealing a round of poker with a specified number of players
deal_poker_round <- function(num_players) {
  # Create a deck of cards
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  ranks <- rep(2:10, times = 4)
  ranks <- c(ranks, rep(c("Jack", "Queen", "King", "Ace"), each = 4))
  
  # Shuffle the deck
  deck <- data.frame(Suit = suits, Rank = ranks)
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  player_hands <- vector("list", length = num_players)
  for (i in 1:num_players) {
    start <- (i - 1) * 5 + 1
    end <- i * 5
    player_hands[[i]] <- deck[start:end, ]
  }
  
  # Identify and display each player's hand
  for (i in 1:num_players) {
    cat("Player", i, "Hand:\n")
    print(player_hands[[i]])
    hand_name <- identify_poker_hand(player_hands[[i]]$Suit, 
                                     player_hands[[i]]$Rank)
    cat("Hand Name:", hand_name, "\n\n")
  }
}
```

Example usage: simulate a round of poker with 4 players. ()

```{r}
#| code-fold: show
deal_poker_round(4)
```

This code defines two functions: identify_poker_hand to identify the name of a 5-card stud poker hand, and deal_poker_round to simulate dealing a round of poker with a specified number of players. The example at the end demonstrates how to use the deal_poker_round function to simulate a round of poker with 4 players and display their hands along with their hand names.

## Part b

Check the first function with a range of inputs

```{r}
test1_suits <- c('Spades', 'Spades', 'Diamonds', 'Clubs', 'Hearts')
test1_ranks <- c(5, 4, 5, 5, 'Jack')
test2_suits <- c('Spades', 'Spades', 'Spades', 'Spades', 'Spades')
test2_ranks <- c('Ace', 2, 3, 4, 5)
test3_suits <- c('Hearts', 'Hearts', 'Hearts', 'Hearts', 'Hearts')
test3_ranks <- c('Jack', 'Queen', 2, 7, 7)
test4_suits <- c('Diamonds', 'Hearts', 'Diamonds', 'Clubs', 'Hearts')
test4_ranks <- c('King', 'King', 'King', 'Ace', 'Ace')
test5_suits <- c('Spades', 'Clubs', 'Spades', 'Clubs', 'Clubs')
test5_ranks <- c(2, 2, 7, 7, 6)
identify_poker_hand(test1_suits, test1_ranks)
identify_poker_hand(test2_suits, test2_ranks)
identify_poker_hand(test3_suits, test3_ranks)
identify_poker_hand(test4_suits, test4_ranks)
identify_poker_hand(test5_suits, test5_ranks)
```

Check the second function with a range of inputs

```{r}
deal_poker_round(3)
```

Give a range of inputs ,we can see that both functions occasionally return the same error:

Error in max(ranks) - min(ranks) :

non-numeric argument to binary operator

It is quite clear. In functions max() and min(), only values with the same type, i.e all values are numeric or strings, can be operated. Since in our "rank" argument, values "Jack", "Queen", "King" and "Ace" are allowed, we cannot compare such strings with an integer. Hence, whenever a Straight comes out, the functions would report errors.

Now fix the issue

```{r}
#| code-fold: show
identify_poker_hand <- function(suits, ranks) {
  # Check for a flush
  is_flush <- length(unique(suits)) == 1
  
  # Check for a straight         * Fixed
  if ('Ace' %in% ranks){         # Change all the strings to numbers
    ranks[ranks == 'Ace'] <- 1
  }
  if ('Jack' %in% ranks){
    ranks[ranks == 'Jack'] <- 11
  }
  if ('Queen' %in% ranks){
    ranks[ranks == 'Queen'] <- 12
  }
  if ('King' %in% ranks){
    ranks[ranks == 'King'] <- 13
  }
  ranks <- as.numeric(ranks)    # Make ranks argument numerical then carry out the calculation
  is_straight <- length(unique(ranks)) == 5 && (max(ranks) - min(ranks)) == 4
  
  # Check for pairs, three of a kind, and four of a kind
  rank_counts <- table(ranks)
  has_pair <- any(rank_counts == 2)
  has_three_of_a_kind <- any(rank_counts == 3)
  has_four_of_a_kind <- any(rank_counts == 4)
  
  # Determine the hand name
  if (is_flush && is_straight) {
    return("Straight Flush")
  } else if (has_four_of_a_kind) {
    return("Four of a Kind")
  } else if (has_three_of_a_kind && has_pair) {
    return("Full House")
  } else if (is_flush) {
    return("Flush")
  } else if (is_straight) {
    return("Straight")
  } else if (has_three_of_a_kind) {
    return("Three of a Kind")
  } else if (sum(rank_counts == 2) == 2) {
    return("Two Pair")
  } else if (has_pair) {
    return("One Pair")
  } else {
    return("High Card")
  }
}
```

The code now runs without any errors but it still cannot produce accurate results when these ranks are given: 10, "Jack", "Queen", "King", "Ace".

## Part c

Explain the code line-by-line

```{r}
#  Function to identify the name of a 5-card stud poker hand
identify_poker_hand <- function(suits, ranks) {
  # Check for a flush; unique() returns a vector that drops all repeated values in
  # the argument given length() returns a numerical value which is the number of
  # elements in the argument given, so the code means that is_flush is true if the
  # unique elements in "suits" is 1.
  
  is_flush <- length(unique(suits)) == 1           
  
  if ('Ace' %in% ranks){
    # Change character "Ace" to numerical value 1; x %in% y means element x is in 
    # the vector y
    ranks[ranks == 'Ace'] <- 1
    # Replace the element "Ace" with 1 if "Ace" is in ranks
  }
  if ('Jack' %in% ranks){         
    ranks[ranks == 'Jack'] <- 11       
    # Change character "Jack" to numerical value 11 
    # Replace the element "Jack" with 11 if "Jack" is in ranks
  }
  if ('Queen' %in% ranks){        
    ranks[ranks == 'Queen'] <- 12 
    # Change character "Queen" to numerical value 12 
    # Replace the element "Queen" with 12 if "Queen" is in ranks
  }
  if ('King' %in% ranks){         
    ranks[ranks == 'King'] <- 13  
    # Change character "King" to numerical value 13
    # Replace the element "King" with 13 if "King" is in ranks
  }
  ranks <- as.numeric(ranks)      
    # Make ranks argument as numeric to carry out the calculation below
  
  # Check for a straight
  is_straight <- length(unique(ranks)) == 5 && (max(ranks) - min(ranks)) == 4
    # is_Straight is true when there are no repeated elements in "ranks" and the 
    # difference between the largest and the smallest number in "rank" is 4.
    # e.g. 4, 5, 6, 7, 8
  
  # Check for pairs, three of a kind, and four of a kind
  rank_counts <- table(ranks)
    # Use table() to find the frequency of each elements in ranks
  has_pair <- any(rank_counts == 2)
    # any() returns a logical value if at least one value is true in its arguments,
    # so has_pair is true if there are any elements in ranks with frequency equal 2
  has_three_of_a_kind <- any(rank_counts == 3)
    # has_three_of_a_kind is true if there are any elements in ranks with frequency
    # equals 3
  has_four_of_a_kind <- any(rank_counts == 4)
    # has_four_of_a_kind is true if there are any elements in ranks with frequency
    # equals 4
  
  # Determine the hand name
  if (is_flush && is_straight) {
    # Hand name is "Straight Flush" when both is_flush and is_straight are true
    return("Straight Flush")                            
  } else if (has_four_of_a_kind) {
    # Hand name is "Four of a Kind" when has_four_of_a_kind is true
    return("Four of a Kind")                           
  } else if (has_three_of_a_kind && has_pair) {
      # Hand name is "Full House" when has_three_of_a_kind and has_pair are true
    return("Full House")                               
  } else if (is_flush) {
      # Hand name is "Flush" when is_flush is true
    return("Flush")
  } else if (is_straight) {
    # Hand name is "Straight" when is_straight is true
    return("Straight")
  } else if (has_three_of_a_kind) {
    # Hand name is "Three of a Kind" when has_three_of_a_kind is true
    return("Three of a Kind")                          
  } else if (sum(rank_counts == 2) == 2) {
    # Hand name is "Two Pair"when there are at least 2 elements with frequency 2
    # in rank
    return("Two Pair")                                  
  } else if (has_pair) {
    # Hand name is "One Pair" when has_pair is true
    return("One Pair")
  } else {
    # In other cases, the hand name is "High Card"
    return("High Card")                                                           
  }
}
```

```{r}
#  Function to simulate dealing a round of poker with a specified number of players
deal_poker_round <- function(num_players) {
  # Create a deck of cards
  
  # rep() replicates the values in the given vector. There are 4 different suits
  # and we want 13 cards for each suits in a deck, so each = 13.
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  # In a deck, 2 to 10 are represented by numbers, and we want 4 cards for each
  # number, so times = 4. The only difference between each and times here is the
  # order of elements in the created vectors.
  ranks <- rep(2:10, times = 4)
  # In a deck, "Jack", "Queen", "King", "Ace" are represented by characters. Add to
  # the deck here.
  ranks <- c(ranks, rep(c("Jack", "Queen", "King", "Ace"), each = 4))
  
  # Shuffle the deck; make sure all players do not always get consecutive ranks of
  # card for each deal.
  
  # Create a data frame to form the deck. Each card has a suit and a rank
  deck <- data.frame(Suit = suits, Rank = ranks)
  # sample() generates a random permutation of the given data frame. The default
  # size is the size of the data frame. We can see the code only changes the order
  # of rows. nrow() gives the row number of deck. 
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  player_hands <- vector("list", length = num_players)
    # vector("list", ) creates an empty list for all players hands to be added. The
    # length of the list is the number of players.
  for (i in 1:num_players) {
    # Create a for loop to add each of the 5 cards for each player.
    start <- (i - 1) * 5 + 1
    # Set the starting card from the deck for each player by arithmetic   .
    end <- i * 5
    # Set the ending card.
    player_hands[[i]] <- deck[start:end, ]
    # Add the 5 cards row-by-row from start to end for each player to the list
    # player_hands.
  }
  
  # Identify and display each player's hand
  for (i in 1:num_players) {
    # Create a for loop to identify and display each player's hand
    cat("Player", i, "Hand:\n")
    # \n means start the next text from a new line.
    print(player_hands[[i]])
    # Display each player's hand
    hand_name <- identify_poker_hand(player_hands[[i]]$Suit, 
                                     player_hands[[i]]$Rank)
    # Identify the name of each player's hand by using the first function
    # identify_poker_hand()
    cat("Hand Name:", hand_name, "\n\n")
  }
}
```

## Part d

Carry out some tests

```{r}
#| code-fold: show
set.seed(7)
deal_poker_round(2)
deal_poker_round(11)
```

**Checklist:**

1.  The inputs and outputs are as described in the question.
2.  Not all cards are valid as there are duplicates.
3.  Most of the names are correct, but when 10, "Jack", "Queen", "King", and "Ace" show up, the code gives "High Card" instead of "Straight". And the code does not give the name "Royal Flush".
4.  It doesn't. If there are more than 10 hands to be dealt, the 11th players only get 2 cards, and players after the 11th get no hands, which shows as NA in the outputs.

**There are 3 problems:**

1.  The hand name of 10, "Jack", "Queen", "King", and "Ace" is not "Straight" but "High Card".

    Bugs of identify_poker_hand(); Change rank "Ace" to integer 1, so when the code checks for a straight, 13 - 1 is not equal to 4. We can fix it by add some conditions for this arithmetic.

2.  The code does not give hand name "Royal Flush".

    Bugs of identify_poker_hand(); Add a new checking condition would solve the problem.

```{r}
#| code-fold: show
identify_poker_hand <- function(suits, ranks) {
  # Check for a flush
  is_flush <- length(unique(suits)) == 1
  
  # Check for a straight         
  if ('Ace' %in% ranks){
    if (all(c(10, 'Jack', 'Queen', 'King') %in% ranks)){
      # all() returns true if the given logical vector has all of the values true
      ranks[ranks == 'Ace'] <- 14
      # Set "Ace" as 9 so the difference the maximal and the minimal equals 4.
    } else {
      ranks[ranks == 'Ace'] <- 1
    }
  }
  if ('Jack' %in% ranks){
    ranks[ranks == 'Jack'] <- 11
  }
  if ('Queen' %in% ranks){
    ranks[ranks == 'Queen'] <- 12
  }
  if ('King' %in% ranks){
    ranks[ranks == 'King'] <- 13
  }
  ranks <- as.numeric(ranks)    
  is_straight <- length(unique(ranks)) == 5 && (max(ranks) - min(ranks)) == 4
  
  # Check for pairs, three of a kind, and four of a kind
  rank_counts <- table(ranks)
  has_pair <- any(rank_counts == 2)
  has_three_of_a_kind <- any(rank_counts == 3)
  has_four_of_a_kind <- any(rank_counts == 4)
  
  # Determine the hand name
  if (is_flush && is_straight) {
    if (14 %in% ranks) {
      return("Royal Flush")
    } else {
      return("Straight Flush")
    }
  } else if (has_four_of_a_kind) {
    return("Four of a Kind")
  } else if (has_three_of_a_kind && has_pair) {
    return("Full House")
  } else if (is_flush) {
    return("Flush")
  } else if (is_straight) {
    return("Straight")
  } else if (has_three_of_a_kind) {
    return("Three of a Kind")
  } else if (sum(rank_counts == 2) == 2) {
    return("Two Pair")
  } else if (has_pair) {
    return("One Pair")
  } else {
    return("High Card")
  }
}
```

Test after the bug is fixed.

```{r}
test1_suits <- c('Clubs', 'Clubs', 'Clubs', 'Clubs', 'Clubs')
test1_ranks <- c(10, 'Jack', 'Queen', 'King', 'Ace')
identify_poker_hand(test1_suits, test1_ranks)
```

```{r}
test2_suits <- c('Hearts', 'Clubs', 'Clubs', 'Clubs', 'Clubs')
test2_ranks <- c(10, 'Jack', 'Queen', 'King', 'Ace')
identify_poker_hand(test2_suits, test2_ranks)
```

We can see now "Straight" and "Royal Flush" can be correctly shown.

3.  There are duplicates in the deck.

Bugs of deal_poker_round(); The bug is caused by the wrong usage of arguments times and each in rep(), so the order is wrong to make each rank correspond to the 4 different suits. It can be fixed by adjust the use of these two arguments in rep() in the step of creating a deck of cards.

```{r}
#| code-fold: show
deal_poker_round <- function(num_players) {
  # Create a deck of cards
  
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), times = 13)
  # Each changed to times
  
  ranks <- rep(2:10, each = 4)
  # Times changed to each
  
  ranks <- c(ranks, rep(c("Jack", "Queen", "King", "Ace"), each = 4))
  
  # Shuffle the deck
  deck <- data.frame(Suit = suits, Rank = ranks)
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  player_hands <- vector("list", length = num_players)
  for (i in 1:num_players) {
    start <- (i - 1) * 5 + 1
    end <- i * 5
    player_hands[[i]] <- deck[start:end, ]
  }
  
  # Identify and display each player's hand
  for (i in 1:num_players) {
    cat("Player", i, "Hand:\n")
    print(player_hands[[i]])
    hand_name <- identify_poker_hand(player_hands[[i]]$Suit, player_hands[[i]]$Rank)
    cat("Hand Name:", hand_name, "\n\n")
  }
}
```

Test after the bug is fixed.

```{r}
set.seed(7)
deal_poker_round(4)
deal_poker_round(11)  # Check all cards by set 11 players
```

Now there are no duplicates in the deck.
